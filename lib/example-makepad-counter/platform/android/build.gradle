// Generated by osiris-platform
plugins {
    id 'com.android.application' version '8.0.2'
    id 'org.mozilla.rust-android-gradle.rust-android' version '0.9.3'
}

var osirisAndroidAbis = project.property('osiris.android.abis').split(';').collect{ it as String }

android {
    compileSdk Integer.parseInt(project.property('osiris.android.compileSdk'))
    namespace project.property('osiris.android.namespace')

    defaultConfig {
        applicationId project.property('osiris.android.applicationId')
        minSdk Integer.parseInt(project.property('osiris.android.minSdk'))
        targetSdk Integer.parseInt(project.property('osiris.android.targetSdk'))
        versionCode Integer.parseInt(project.property('osiris.android.versionCode'))
        versionName project.property('osiris.android.versionName')

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            ndk {
                abiFilters = osirisAndroidAbis
            }
        }
        release {
            initWith debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets.getByName('main') {
        java.srcDirs('../../src/java')
        res.srcDirs('../../src/res')
    }
}

cargo {
    apiLevel = Integer.parseInt(project.property('osiris.android.minSdk'))
    extraCargoBuildArguments = ['--lib']
    libname = project.property('osiris.application.packageSymbol')
    module  = project.property('osiris.application.path')
    targetDirectory = project.property('osiris.metadata.targetDirectory')

    profile = 'release'

    targets = osirisAndroidAbis.collect{
        if (it == 'armeabi-v7a') {
            'arm'
        } else if (it == 'arm64-v8a') {
            'arm64'
        } else {
            it
        }
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        def flavor = ''
        variant.productFlavors.each {
            flavor += "${it.name.capitalize()}"
        }
        def type = "${variant.buildType.name.capitalize()}"
        tasks["generate${flavor}${type}Assets"].dependsOn(tasks['cargoBuild'])
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}
